'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var fs = require('graceful-fs');
var pify = require('pify');
var steno = require('steno');
var Base = require('./Base');

var readFile = pify(fs.readFile);
var writeFile = pify(steno.writeFile);

var FileAsync = function (_Base) {
  _inherits(FileAsync, _Base);

  function FileAsync() {
    _classCallCheck(this, FileAsync);

    return _possibleConstructorReturn(this, (FileAsync.__proto__ || Object.getPrototypeOf(FileAsync)).apply(this, arguments));
  }

  _createClass(FileAsync, [{
    key: 'read',
    value: function () {
      var _ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee() {
        var data;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (!fs.existsSync(this.source)) {
                  _context.next = 14;
                  break;
                }

                _context.prev = 1;
                _context.next = 4;
                return readFile(this.source, 'utf-8');

              case 4:
                data = _context.sent.trim();
                return _context.abrupt('return', data ? this.deserialize(data) : this.defaultValue);

              case 8:
                _context.prev = 8;
                _context.t0 = _context['catch'](1);

                if (_context.t0 instanceof SyntaxError) {
                  _context.t0.message = 'Malformed JSON in file: ' + this.source + '\n' + _context.t0.message;
                }
                throw _context.t0;

              case 12:
                _context.next = 17;
                break;

              case 14:
                _context.next = 16;
                return writeFile(this.source, this.serialize(this.defaultValue));

              case 16:
                return _context.abrupt('return', this.defaultValue);

              case 17:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this, [[1, 8]]);
      }));

      function read() {
        return _ref.apply(this, arguments);
      }

      return read;
    }()
  }, {
    key: 'write',
    value: function write(data) {
      return writeFile(this.source, this.serialize(data));
    }
  }]);

  return FileAsync;
}(Base);

module.exports = FileAsync;